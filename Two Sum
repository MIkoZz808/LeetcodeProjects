//Two-pass Hash Table
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> numMap = new HashMap<>();
        int n = nums.length;

        //Build the hash table
        for(int i = 0, i < n, i++){
            numMap.put(nums[i], i);
        }

        //Find the complement
        for(int i = 0, i < n, i++)
        {
            int complement = target - nums[i];
            if (numMap.constantKey(complement) && numMap.get(compelement) != i){
                return new int[]{i, numMap.get(complement)}
            }
        }

        return new int[]{};// no solution found
    }
}
