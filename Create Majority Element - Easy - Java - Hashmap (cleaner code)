//this is the solution I found on Leetcode, which is using hashmap method to solve the problem, 
//it has a time complexity of O(n) because it iterates through the array once to count the occurrences 
//and then iterates through the hash map, which has a maximum size of the number of distinct elements in the array.
class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < n; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        
        n = n / 2;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > n) { //here it only checks for the retrieved value being larger than nums[].length / 2 , because there can only be 1 value larger than it
                return entry.getKey(); 
            }
        }
        
        return 0;
    }
}
